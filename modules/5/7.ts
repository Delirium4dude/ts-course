namespace lesson_7 {
  type PaymentStatus = 'new' | 'paid'

  class Payment {
    id: number
    status: PaymentStatus = 'new'

    constructor(id: number) {
      this.id = id
    }

    pay() {
      this.status = 'paid';
    }
  }

  // extends - расширение, один класс расширяет другой болле простой (абстрактный) класс
  class PersistedPayment extends Payment {
    databaseId: number;
    paidAt: Date;

    constructor() {
      const id = Math.random();
      super(id); // если есть extends расширение вызов super() обязательный для того чтобы инициализацию наследуемого класса
    }

    save() {}

    override pay(date?: Date) {
      super.pay();
      this.status = 'paid';
      if (date)
        this.paidAt = date;
    }
  }

  const payment = new PersistedPayment()
}


/**
  Почему используется type, а не enum?
  На 2-й строке статус платежа определён так:

  type PaymentStatus = 'new' | 'payed'
  а не так:

  enum PaymentStatus {
    NEW = 'NEW',
    PAID = 'PAID',
  }

  1. Лёгкость и простота
      type с литеральными значениями проще и легче:
      - Не создаёт дополнительного кода в JavaScript. После компиляции type исчезает, а enum превращается в объект.
      - Нет лишней "нагрузки", если нужно всего 2-3 значения.

  2. Проверка на этапе компиляции
    Типы с литеральными значениями ('NEW' | 'PAID') отлично подходят для контроля допустимых значений на этапе компиляции. Ошибиться становится сложнее – TypeScript не пропустит лишние значения.

  3. Гибкость и масштабируемость
    Если значения не планируется часто расширять и использовать в различных местах программы как самостоятельные сущности, type — отличный выбор.

  Когда использовать enum?
    Когда значения статуса могут изменяться или их становится очень много.
    Если значения часто используются как отдельные объекты (например, для передачи в базу данных, логах и так далее).
    Когда важен автокомплит или ассоциация значений с числами (enum поддерживает числовые и строковые значения).
  Что лучше?
    В простых случаях (2-3 значения, просто строковые статусы) — использовать type.
    В комплексных системах (много статусов, нужны методы, числовые значения, взаимодействие с внешними сервисами) — подходит enum.
  Вывод:
    В уроке выбрали type потому что это просто, наглядно и легко поддерживается на небольшом числе значений. Это современный подход (см. официальную документацию TypeScript), и он предпочтительнее для подобных кейсов.

  Рекомендация
  Пока не появляются требования для расширения логики, используй type с union-типом строк.
  Если появятся дополнительные требования (например, необходимость рендерить списки статусов, международизация, ассоциация с какими-то данными), можешь спокойно перейти на enum.
 */